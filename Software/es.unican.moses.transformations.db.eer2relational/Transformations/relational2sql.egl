[%
	var database : Relational!Schema = Schema.allInstances().first();
	'Creating script sql for the database '.concat(database.name).println();
%]
-- ****************************************
-- Drop Database
-- ****************************************
PRINT '';
PRINT '*** Dropping Database';
GO

USE [master];
GO

IF EXISTS (SELECT [name] FROM [master].[sys].[databases] WHERE [name] = N'[%=database.name%]')
    DROP DATABASE [[%=database.name%]];

-- If the database has any other open connections close the network connection.
IF @@ERROR = 3702 
    RAISERROR('[[%=database.name%]] database cannot be dropped because there are still other open connections', 127, 127) WITH NOWAIT, LOG;
GO


-- ****************************************
-- Create Database
-- ****************************************
PRINT '';
PRINT '*** Creating Database';
GO

CREATE DATABASE [[%=database.name%]];
GO

ALTER DATABASE [[%=database.name%]] 
SET RECOVERY SIMPLE, 
    ANSI_NULLS ON, 
    ANSI_PADDING ON, 
    ANSI_WARNINGS ON, 
    ARITHABORT ON, 
    CONCAT_NULL_YIELDS_NULL ON, 
    QUOTED_IDENTIFIER ON, 
    NUMERIC_ROUNDABORT OFF, 
    PAGE_VERIFY CHECKSUM, 
    ALLOW_SNAPSHOT_ISOLATION OFF;
GO

USE [[%=database.name%]];
GO


-- ******************************************************
-- Create tables
-- ******************************************************
PRINT '';
PRINT '*** Creating Tables';
GO
[%
	for(table in database.tables){
		'Creating table '.concat(table.name).println();
%]
CREATE TABLE [%=table.name%](
[%
		var nullable : String;
		for(column in table.attributes){
			if(column.nullable = true){
				nullable = 'NULL';
			}else{
				nullable = 'NOT NULL';
			}
%]
	[%=column.name%]	[%=column.domain.name%]		[%=nullable%],	
[%
		}
%]
[%	
	for(n in table.candidateKey){
		var count : Integer = 0;
		var attributes : String = '';
		for(i in n.attributes){
			if(count = 0){
				attributes = attributes.concat(i.name);
			}else{
				attributes = attributes.concat(',').concat(i.name);
			}
			count = count + 1;
		}
%]
	CONSTRAINT [%=n.name%] UNIQUE ([%=attributes%]),
[%
	}
		
		var attributes : String = '';
		var count : Integer = 0;
		for(n in table.primaryKey.attributes){		
			if(count = 0){
				attributes = attributes.concat(n.name);
			}else{
				attributes = attributes.concat(',').concat(n.name);
			}
			count = count + 1;
		}
%]
	CONSTRAINT pk_[%=table.name%]_id PRIMARY KEY([%=attributes%])
	)
GO


[%
	}
%]


-- ******************************************************
-- Alter tables
-- ******************************************************
PRINT '';
PRINT '*** Adding references';
GO
[%
	for(table in database.tables){
		if(not table.foreignKey.isEmpty()){	
			for(n in table.foreignKey){
				'Adding references in'.concat(table.name).println();
%]
		ALTER TABLE [%=table.name%]
[%	
				var attributes : String = '';
				var count : Integer = 0;
				for(i in n.attributes){
					if(count = 0){
						attributes = attributes.concat(i.name);
					}else{
						attributes = attributes.concat(',').concat(i.name);
					}
					count = count + 1;
				}
				count = 0;
				var attributes2 : String = '';
				for(i in n.referencedTable.primaryKey.attributes){
					if(count = 0){
						attributes2 = attributes2.concat(i.name);
					}else{
						attributes2 = attributes2.concat(',').concat(i.name);
					}
					count = count + 1;
				}
%]
	ADD CONSTRAINT [%=n.name%] FOREIGN KEY([%=attributes%])REFERENCES [%=n.referencedTable.name%]([%=attributes2%])
	GO
		
[%
			}
		}
	}
%]
-- ******************************************************
-- Triggers
-- ******************************************************
PRINT '';
PRINT '*** Creating Triggers';
GO
	
[%
	for(c in database.constraints){
		'Creating trigger '.concat(c.name).println();
%]
[%=c.description%]
[%
	}
%]
	
	

USE [master];
GO